rm(list=ls())
options(stringsAsFactors = FALSE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set wd to the current file locati
dfLD<- read.csv ('../Raw_data/Normalized LD numbers.csv', stringsAsFactors = FALSE)
dfLD<- as.data.frame(dfLD)
x=as.numeric (dfLD[,"Control"]) #to compare each condition to the control
p_val_LD<- NULL
for (i in 1:ncol(dfLD))
{
p_value<-wilcox.test(x,dfLD[,i])[["p.value"]]
{
p_val_LD[[length(p_val_LD) + 1]] <- p_value
}
}
p_val_LD<-as.data.frame(p_val_LD)
row.names(p_val_LD)<-colnames(dfLD)
rm(i)
p_adj_LD<- NULL
for (i in 1:ncol(p_val_LD))
{
p_adj<-p.adjust(p_val_LD$p_val_LD,method = "BH")
{
p_adj_LD[[length(p_adj_LD) + 1]] <- p_adj
}
}
rm(i)
p_adj_LD<-as.data.frame(p_adj_LD)
row.names(p_adj_LD)<-colnames(dfLD)
colnames(p_adj_LD)<-"p_adj_LD"
FC_LD = colMeans(dfLD, na.rm = T)/ mean(dfLD[,1], na.rm = T)
FC_LD<-as.data.frame(FC_LD)
LD_stats <-cbind(p_val_LD, p_adj_LD, FC_LD)
dfP<- read.csv ('../Raw_data/Normalized P numbers.csv', stringsAsFactors = FALSE)
dfP<- as.data.frame(dfP)
x=as.numeric (dfP[,"Control"]) #to compare each condition to the control
p_val_P<- NULL
for (i in 1:ncol(dfP))
{
p_value<-wilcox.test(x,dfP[,i])[["p.value"]]
{
p_val_P[[length(p_val_P) + 1]] <- p_value
}
}
rm(i)
p_val_P<-as.data.frame(p_val_P)
row.names(p_val_P)<-colnames(dfP)
p_adj_P<- NULL
for (i in 1:ncol(p_val_P))
{
p_adj<-p.adjust(p_val_P$p_val_P,method = "BH")
{
p_adj_P[[length(p_adj_P) + 1]] <- p_adj
}
}
rm(i)
p_adj_P<-as.data.frame(p_adj_P)
row.names(p_adj_P)<-colnames(dfP)
colnames(p_adj_P)<-"p_adj_P"
FC_P = colMeans(dfP, na.rm = T)/ mean(dfP[,1], na.rm = T)
FC_P<-as.data.frame(FC_P)
P_stats <-cbind(p_val_P, p_adj_P, FC_P)
######## 3) Sort and merge data #################################################
LD_stats [nrow(LD_stats ) + 1,] = c("1","1", "NA") #add one row with values for dhs-3
row.names(LD_stats)[53] <- 'dhs.3'
LD_stats <- LD_stats[ order(row.names(LD_stats)), ]
P_stats <- P_stats[ order(row.names(P_stats)), ]
identical(rownames(LD_stats), rownames(P_stats)) #true
######## 3) Merge and save
Combined_Screen <-as.data.frame(cbind(LD_stats, P_stats)) #make one table
write.csv (Combined_Screen, "../Output_Data/13_Lipid_droplet_Peroxisome_Screen_Stats.csv")
# sessionInfo(package=NULL)
# sessionInfo(package=NULL)
# R version 3.6.3 (2020-02-29)
# sessionInfo(package=NULL)
# R version 3.6.3 (2020-02-29)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
View(FC_LD)
View(FC_P)
View(dfP)
View(p_adj_LD)
View(p_adj_P)
install.packages("tidyverse")
install.packages("tidyverse")
#Packages:
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set wd to the current file location
rm(list=ls())
#Load negative mode data
table_neg<-read.csv("../Raw_data/210223_KP_neg.csv", fill = TRUE, header = TRUE, row.names=NULL, stringsAsFactors = FALSE)[,1:38]
table_neg<-table_neg[,-c(1,3,8:12,37)] #Delete columns that are not needed for analysis (LipidIon/fatty acids merged/CalcMZ to GroupTopPos.c./QC MSMS)
#Select the correct ionization mode for per lipid. Negative mode data contains "CL","DLCL","LPC","LPE","LPI","LPS","MLCL","PA","PC","PE","PG","PI","PS")
table_neg<-table_neg %>%
filter(Class %in% c("CL","DLCL","LPC","LPE","LPI","LPS","MLCL","PA","PC","PE","PG","PI","PS"))
#Load positive mode data
table_pos<-read.csv("../Raw_data/210223_KP_pos.csv", fill = TRUE, header = TRUE, row.names=NULL, stringsAsFactors = FALSE)[,1:38]
table_pos<-table_pos[,-c(1,3,8:12,37)] #Delete columns that are not needed for analysis (LipidIon/fatty acids merged/CalcMZ to GroupTopPos.c./QC MSMS)
#Select the correct ionization mode for per lipid. Positive mode data contains "Cer","ChE","DG","MG","SM","TG"
table_pos<-table_pos %>%
filter(Class %in% c("Cer","ChE","DG","MG","SM","TG"))
# Bind tables
table<-bind_rows(table_neg,table_pos)
#Packages:
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set wd to the current file location
rm(list=ls())
#Load negative mode data
table_neg<-read.csv("../Raw_data/210223_KP_neg.csv", fill = TRUE, header = TRUE, row.names=NULL, stringsAsFactors = FALSE)[,1:38]
table_neg<-table_neg[,-c(1,3,8:12,37)] #Delete columns that are not needed for analysis (LipidIon/fatty acids merged/CalcMZ to GroupTopPos.c./QC MSMS)
#Select the correct ionization mode for per lipid. Negative mode data contains "CL","DLCL","LPC","LPE","LPI","LPS","MLCL","PA","PC","PE","PG","PI","PS")
table_neg<-table_neg %>%
filter(Class %in% c("CL","DLCL","LPC","LPE","LPI","LPS","MLCL","PA","PC","PE","PG","PI","PS"))
table_neg
table_pos<-read.csv("../Raw_data/210223_KP_pos.csv", fill = TRUE, header = TRUE, row.names=NULL, stringsAsFactors = FALSE)[,1:38]
#Load positive mode data
table_pos<-read.csv("../Raw_data/210223_KP_pos.csv", fill = TRUE, header = TRUE, row.names=NULL, stringsAsFactors = FALSE)[,1:38]
table_pos<-table_pos[,-c(1,3,8:12,37)] #Delete columns that are not needed for analysis (LipidIon/fatty acids merged/CalcMZ to GroupTopPos.c./QC MSMS)
#Select the correct ionization mode for per lipid. Positive mode data contains "Cer","ChE","DG","MG","SM","TG"
table_pos<-table_pos %>%
filter(Class %in% c("Cer","ChE","DG","MG","SM","TG"))
table_pos
table<-bind_rows(table_neg,table_pos)
# Bind tables
table<-bind_rows(table_neg,table_pos)
table <- table %>%
filter_at(vars(6:29), any_vars((.) != 0))%>%  # Delete lipids with 0 signal
group_by(Class,FA1,FA2,FA3,FA4) %>%
summarise_all(sum,na.rm = FALSE)  # Aggregate
#load negative mode internal standard
is_neg<-read.csv("../Raw_data/210223_KP_neg.csv", fill = TRUE, header = FALSE, row.names=NULL, stringsAsFactors = FALSE)[1:29,40:48]
is_neg[1,]<-gsub("-","",is_neg[1,]) #delete the - in the column names
is_neg[1,]<-gsub("d","",is_neg[1,]) #delete the d in the column names
is_neg[,1]<-gsub("-",".",is_neg[,1]) #delete the - in the row names
colnames(is_neg)<- is_neg[1,] #set colnames
is_neg<-is_neg[-c(1:3,5),] #delete the QCs
colnames(is_neg)[1]<-"Sample"
#load positive mode internal standard
is_pos<-read.csv("../Raw_data/210223_KP_pos.csv", fill = TRUE, header = FALSE, row.names=NULL, stringsAsFactors = FALSE)[1:28,40:45]
is_pos[1,]<-gsub("d","",is_pos[1,]) #delete the - in the column names
is_pos[,1]<-gsub("-",".",is_pos[,1]) #delete the d in the column names
colnames(is_pos)<- is_pos[1,] #set colnames
is_pos<-is_pos[-c(1:3),] #delete the QCs
colnames(is_pos)[1]<-"Sample"
#make internal standards table
is_table<-bind_cols(is_neg[,-7],is_pos[,-1]) # Delete names of positive standards and Ceramide standard (Cer) form negative mode.
# Add standards for quantification by using molecular similarity
is_table<-is_table %>%
mutate(CL = PG) %>% #annotate the same values from CL to PG etc
mutate(DLCL = PG) %>%
mutate(MLCL = PG) %>%
mutate(LPI = LPE) %>%
mutate(LPS = LPE) %>%
mutate(MG = DG)
table_norm<-table%>%
dplyr::select(c(1:5)) # make new table with lipid names
for (j in sort(is_table$Sample)) {
temp_IS<-is_table%>%filter(Sample == j)
temp_tab<-table%>%dplyr::select(c(1:5,j))
class_norm<-tibble()
for (i in colnames(is_table)[2:ncol(is_table)])  {
IS<-temp_IS%>%dplyr::select(i)
temp_class<-temp_tab%>%filter(Class == i)
temp_class[,ncol(temp_class)]<-temp_class[,ncol(temp_class)]/as.numeric(IS)*200 #in ng. Normalization step by dividing lipid value/internal standard
class_norm<-bind_rows(class_norm,temp_class) #adds the standardized values to normalized table
}
table_norm<-full_join(table_norm,class_norm)
}
rm("i")
rm("j")
table_norm[,6:ncol(table_norm)]<-table_norm[,6:ncol(table_norm)]-((table_norm$blank)*3) # Everything that is lower than 3 times the blank is discarded
table_norm<-table_norm %>% #delete the blank from the dataset
select(-blank)
magrittr
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set wd to the current file location
rm(list=ls())
#Load negative mode data
table_neg<-read.csv("../Raw_data/210223_KP_neg.csv", fill = TRUE, header = TRUE, row.names=NULL, stringsAsFactors = FALSE)[,1:38]
table_neg<-table_neg[,-c(1,3,8:12,37)] #Delete columns that are not needed for analysis (LipidIon/fatty acids merged/CalcMZ to GroupTopPos.c./QC MSMS)
#Select the correct ionization mode for per lipid. Negative mode data contains "CL","DLCL","LPC","LPE","LPI","LPS","MLCL","PA","PC","PE","PG","PI","PS")
table_neg<-table_neg %>%
filter(Class %in% c("CL","DLCL","LPC","LPE","LPI","LPS","MLCL","PA","PC","PE","PG","PI","PS"))
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set wd to the current file location
rm(list=ls())
#Load negative mode data
table_neg<-read.csv("../Raw_data/210223_KP_neg.csv", fill = TRUE, header = TRUE, row.names=NULL, stringsAsFactors = FALSE)[,1:38]
table_neg<-table_neg[,-c(1,3,8:12,37)] #Delete columns that are not needed for analysis (LipidIon/fatty acids merged/CalcMZ to GroupTopPos.c./QC MSMS)
#Select the correct ionization mode for per lipid. Negative mode data contains "CL","DLCL","LPC","LPE","LPI","LPS","MLCL","PA","PC","PE","PG","PI","PS")
table_neg<-table_neg %>%
filter(Class %in% c("CL","DLCL","LPC","LPE","LPI","LPS","MLCL","PA","PC","PE","PG","PI","PS"))
#Load positive mode data
table_pos<-read.csv("../Raw_data/210223_KP_pos.csv", fill = TRUE, header = TRUE, row.names=NULL, stringsAsFactors = FALSE)[,1:38]
table_pos<-table_pos[,-c(1,3,8:12,37)] #Delete columns that are not needed for analysis (LipidIon/fatty acids merged/CalcMZ to GroupTopPos.c./QC MSMS)
#Select the correct ionization mode for per lipid. Positive mode data contains "Cer","ChE","DG","MG","SM","TG"
table_pos<-table_pos %>%
filter(Class %in% c("Cer","ChE","DG","MG","SM","TG"))
# Bind tables
table<-bind_rows(table_neg,table_pos)
table <- table %>%
filter_at(vars(6:29), any_vars((.) != 0))%>%  # Delete lipids with 0 signal
group_by(Class,FA1,FA2,FA3,FA4) %>%
summarise_all(sum,na.rm = FALSE)  # Aggregate
#load negative mode internal standard
is_neg<-read.csv("../Raw_data/210223_KP_neg.csv", fill = TRUE, header = FALSE, row.names=NULL, stringsAsFactors = FALSE)[1:29,40:48]
is_neg[1,]<-gsub("-","",is_neg[1,]) #delete the - in the column names
is_neg[1,]<-gsub("d","",is_neg[1,]) #delete the d in the column names
is_neg[,1]<-gsub("-",".",is_neg[,1]) #delete the - in the row names
colnames(is_neg)<- is_neg[1,] #set colnames
is_neg<-is_neg[-c(1:3,5),] #delete the QCs
colnames(is_neg)[1]<-"Sample"
#load positive mode internal standard
is_pos<-read.csv("../Raw_data/210223_KP_pos.csv", fill = TRUE, header = FALSE, row.names=NULL, stringsAsFactors = FALSE)[1:28,40:45]
is_pos[1,]<-gsub("d","",is_pos[1,]) #delete the - in the column names
is_pos[,1]<-gsub("-",".",is_pos[,1]) #delete the d in the column names
colnames(is_pos)<- is_pos[1,] #set colnames
is_pos<-is_pos[-c(1:3),] #delete the QCs
colnames(is_pos)[1]<-"Sample"
#make internal standards table
is_table<-bind_cols(is_neg[,-7],is_pos[,-1]) # Delete names of positive standards and Ceramide standard (Cer) form negative mode.
# Add standards for quantification by using molecular similarity
is_table<-is_table %>%
mutate(CL = PG) %>% #annotate the same values from CL to PG etc
mutate(DLCL = PG) %>%
mutate(MLCL = PG) %>%
mutate(LPI = LPE) %>%
mutate(LPS = LPE) %>%
mutate(MG = DG)
table_norm<-table%>%
dplyr::select(c(1:5)) # make new table with lipid names
for (j in sort(is_table$Sample)) {
temp_IS<-is_table%>%filter(Sample == j)
temp_tab<-table%>%dplyr::select(c(1:5,j))
class_norm<-tibble()
for (i in colnames(is_table)[2:ncol(is_table)])  {
IS<-temp_IS%>%dplyr::select(i)
temp_class<-temp_tab%>%filter(Class == i)
temp_class[,ncol(temp_class)]<-temp_class[,ncol(temp_class)]/as.numeric(IS)*200 #in ng. Normalization step by dividing lipid value/internal standard
class_norm<-bind_rows(class_norm,temp_class) #adds the standardized values to normalized table
}
table_norm<-full_join(table_norm,class_norm)
}
rm("i")
rm("j")
table_norm[,6:ncol(table_norm)]<-table_norm[,6:ncol(table_norm)]-((table_norm$blank)*3) # Everything that is lower than 3 times the blank is discarded
table_norm<-table_norm %>% #delete the blank from the dataset
select(-blank)
# Remove rows with more than 50% <=0 values in the dataset
table_norm[,6:29][table_norm [,6:29] <= 0] <- NA # <0 =  NA
table_norm<-table_norm[which(rowMeans(!is.na(table_norm [,6:29])) > 0.5), ] # Remove rows with more than 50% NA
prot_cc_tab<-read.csv("../Raw_data/210223_KP_protein_concentration_mgml.csv", header = TRUE)
prot_cc_tab<- prot_cc_tab %>%
select(sort(names(prot_cc_tab)))
prot_cc_tab<-prot_cc_tab*50/1000 # (mg of protein in sample)
table_norm_p<-as.data.frame(table_norm)
table_norm_p[,6:ncol(table_norm_p)]<-table_norm_p[,6:ncol(table_norm_p)]/as.list(as.numeric(prot_cc_tab[1,])) # (ng of lipid/mg of protein)
# Eliminate brackets
for (i in 2:5) {
table_norm_p[,i] <- gsub("\\(|\\)","",table_norm_p[,i])
table_norm_p[,i]  <- gsub("\\)","",table_norm_p[,i])
}
# Calculate normalization factor = median of each sample * global median
table_norm_med<-table_norm_p
median_table <- apply(table_norm_med[,6:ncol(table_norm_med)], 2, median, na.rm=T) #make median for each column (except names)
global_median = median(median_table)
# Normalize to median
table_norm_med[,6:ncol(table_norm_med)] <- sweep(table_norm_med[,6:ncol(table_norm_med)], 2, median_table, "/")
table_norm_med[,6:ncol(table_norm_med)] <- sweep(table_norm_med[,6:ncol(table_norm_med)], 2, global_median, "*") #output in ng/mg protein
save(table_norm_med, file = paste0("../Output_Data/1_Lipids_Preprocessed_Normalized", ".Rdata")) #output in ng/mg protein
write.csv(table_norm_med, "../Output_Data/1_Lipids_Preprocessed_Normalized.csv")
# sessionInfo(package = NULL)
# sessionInfo(package = NULL)
#
# sessionInfo(package = NULL)
#
# R version 3.6.1 (2019-07-05)
# sessionInfo(package = NULL)
#
# R version 3.6.1 (2019-07-05)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# sessionInfo(package = NULL)
#
# R version 3.6.1 (2019-07-05)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# Running under: macOS Mojave 10.14.6
# sessionInfo(package = NULL)
#
# R version 3.6.1 (2019-07-05)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# Running under: macOS Mojave 10.14.6
#
# sessionInfo(package = NULL)
#
# R version 3.6.1 (2019-07-05)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# Running under: macOS Mojave 10.14.6
#
# Matrix products: default
# sessionInfo(package = NULL)
#
# R version 3.6.1 (2019-07-05)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# Running under: macOS Mojave 10.14.6
#
# Matrix products: default
# BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
# sessionInfo(package = NULL)
#
# R version 3.6.1 (2019-07-05)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# Running under: macOS Mojave 10.14.6
#
# Matrix products: default
# BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
# LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib
