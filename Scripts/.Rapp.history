######## Shared GO terms between Greer et al. Nature 2010 (EG) and Han et al. Nature 2017 (SH)
rm(list=ls())
rm(list=ls())#
library(dplyr)#
library(pheatmap)#
library(RColorBrewer)
install.packages("pheatmap")
rm(list=ls())#
library(dplyr)#
library(pheatmap)#
library(RColorBrewer)
options(stringsAsFactors = FALSE)#
#
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set wd to the current file location
GOterms_SH <- read.delim("../Raw_data/GO_terms_SH.txt", header= T)
GOterms_SH
getwd()
GOterms_SH$Term_SH = as.factor(GOterms_SH$Term_SH)
# Loading data#
GOterms_EG <- read.delim('../Raw_data/GO_terms_EG.txt', header= T)#
#
# Making sure these are factors#
GOterms_EG$Term_EG = as.factor(GOterms_EG$Term_EG)#
#
########Merging two tables  ##################################################
#
x<- GOterms_EG#
y<- GOterms_SH#
#
########1) Dataframe with shared GO terms  ##################################################
#
#make a list with the shared GO terms and the corresponding combined scores for SH and EG#
df1 <- merge(x, y, by = intersect(names(x), names(y)),#
                          by.x = "Term_EG", by.y = "Term_SH", all = FALSE,#
                          sort = TRUE, suffixes = c(".x",".y"), no.dups = TRUE,#
                          incomparables = NULL)#
#
#rename first column#
colnames (df1) <- c("Terms", "Combined_score_EG","Combined_score_SH")#
#
#delete duplicates. Duplicates are deleted based on a higher combined score in the Han et al. Nature 2017 (SH) dataset.#
df1 = df1[order(df1[,'Terms'],-df1[,'Combined_score_SH']),]#
df2 = df1[!duplicated(df1$Term),]#
#
#make "terms" to rownames#
df3 <- df2[,-1]#
rownames(df3) <- df2[,1]#
write.csv(df3, file='../Output_Data/12_Shared_GO_terms.csv', row.names = T)#
#
########2) Heatmap of shared GO terms  ##################################################
#
#manual annotation of the GO-terms in excel. This is to summarize the GO-terms into larger categories for visibility.#
#
########3) Heatmap of shared GO terms  ##################################################
#
df4<- read.csv('../Raw_data/Shared_GO_terms_manual_annotation.csv', header= T) #manually load sorted GO terms#
#
#clean data#
rownames(df4)<-df4[,1]#
df5<-df4[,-c(1,4:6)]#
#
#double check that no mistake happened during manual annotation#
sortdf3<-sort(df3[,1]) #shared GO-terms sorted by column 1#
sortdf5<-sort(df5[,1]) #manual annotated shared GO-terms sorted by column 1#
#
identical(sortdf3,sortdf5) #true#
#
#plot#
heatmap<-pheatmap(df5, #
         cluster_rows = F,#
         fontsize_row=4,#
         show_rownames = T,#
         color = colorRampPalette(c("seashell", "chocolate1", "red3"))(100)) #
#
#save#
pdf("../Output_Figures/12_Shared_GO_term_heatmap.pdf")#
print(heatmap)#
dev.off()
rm(list=ls())#
#
options(stringsAsFactors = FALSE)#
#
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set wd to the current file locati
########1) Lipid droplet number statistics ##################################################
#
dfLD<- read.csv ('../Raw_data/Normalized LD numbers.csv', stringsAsFactors = FALSE)#
dfLD<- as.data.frame(dfLD)#
######## Calculate exact p-values for lipid droplet number of RNAi conditions compared to control #
#
x=as.numeric (dfLD[,"Control"]) #to compare each condition to the control #
#
p_val_LD<- NULL#
#
for (i in 1:ncol(dfLD))#
{#
  p_value<-wilcox.test(x,dfLD[,i])[["p.value"]] #
  {#
    p_val_LD[[length(p_val_LD) + 1]] <- p_value#
  }#
}#
#
p_val_LD<-as.data.frame(p_val_LD)#
#
row.names(p_val_LD)<-colnames(dfLD)#
#
rm(i)
rm(list=ls())#
#
options(stringsAsFactors = FALSE)#
#
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set wd to the current file locati#
########1) Lipid droplet number statistics ##################################################
#
dfLD<- read.csv ('../Raw_data/Normalized LD numbers.csv', stringsAsFactors = FALSE)#
dfLD<- as.data.frame(dfLD)
dfLD
x=as.numeric (dfLD[,"Control"]) #to compare each condition to the control
p_val_LD<- NULL
for (i in 1:ncol(dfLD))#
{#
  p_value<-wilcox.test(x,dfLD[,i])[["p.value"]] #
  {#
    p_val_LD[[length(p_val_LD) + 1]] <- p_value#
  }#
}
p_val_LD<-as.data.frame(p_val_LD)
row.names(p_val_LD)<-colnames(dfLD)
row.names(p_val_LD)
p_val_LD
colnames(dfLD)
size(p_val_LD)
dim(p_val_LD)
colnames(dfLD)
i
rm(i)
i
x=as.numeric (dfLD[,"Control"]) #to compare each condition to the control
x
dim(x)
x
x[331]
ncol(dfLD)
dfLD
i = 1
dfLD[,i]
dfLD
dim(dfLD)
dim(dfLD[,1])
len(dfLD[,1])
length(dfLD[,1])
dfLD[,1]
dfLD
GOterms_SH
x
p_val_LD
row.names(p_val_LD)
colnames(p_val_LD)<-colnames(dfLD)
pval_LD
p_val_LD
LD_stats <-cbind(p_val_LD, p_adj_LD, FC_LD)
p_adj_LD<- NULL#
#
for (i in 1:ncol(p_val_LD))#
{#
  p_adj<-p.adjust(p_val_LD$p_val_LD,method = "BH")#
  {#
    p_adj_LD[[length(p_adj_LD) + 1]] <- p_adj#
  }#
}#
#
rm(i)#
#
p_adj_LD<-as.data.frame(p_adj_LD)
row.names(p_adj_LD)<-colnames(dfLD)
colnames(p_adj_LD)<-"p_adj_LD"
p_adj_LD
row.names(p_adj_LD)
p_adj_LD
p_adj_LD<- NULL#
#
for (i in 1:ncol(p_val_LD))#
{#
  p_adj<-p.adjust(p_val_LD$p_val_LD,method = "BH")#
  {#
    p_adj_LD[[length(p_adj_LD) + 1]] <- p_adj#
  }#
}
p_adj_LD
rm(i)
# Data: (1) Normalized lipid droplet and peroxisome numbers that are used to generate the Manhattan plot Fig 3i-l. #
#           R is used to calculate exact p-values and p-adjust #
#
#Approach: 1) Perform lipid droplet number statistics#
#          2) Perform peroxisome number statistics#
#          3) Merge and save#
#
# Goal: Apply Wilcoxon rank test and Benjamini Hochberg to correct for multiple hypotheses#
#
# Output: Csv: 13_Lipid_droplet_Peroxisome_Screen_Stats.csv #
rm(list=ls())#
#
options(stringsAsFactors = FALSE)#
#
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set wd to the current file locati#
########1) Lipid droplet number statistics ##################################################
#
dfLD<- read.csv ('../Raw_data/Normalized LD numbers.csv', stringsAsFactors = FALSE)#
dfLD<- as.data.frame(dfLD)
x=as.numeric (dfLD[,"Control"]) #to compare each condition to the control #
#
p_val_LD<- NULL#
#
for (i in 1:ncol(dfLD))#
{#
  p_value<-wilcox.test(x,dfLD[,i])[["p.value"]] #
  {#
    p_val_LD[[length(p_val_LD) + 1]] <- p_value#
  }#
}#
#
p_val_LD<-as.data.frame(p_val_LD)
colnames(p_val_LD)<-colnames(dfLD)
p_val_LD
p_adj_LD<- NULL#
#
for (i in 1:ncol(p_val_LD))#
{#
  p_adj<-p.adjust(p_val_LD$p_val_LD,method = "BH")#
  {#
    p_adj_LD[[length(p_adj_LD) + 1]] <- p_adj#
  }#
}#
#
rm(i)#
#
p_adj_LD<-as.data.frame(p_adj_LD)
colnames(p_adj_LD)<-colnames(dfLD)
colnames(p_adj_LD)<-"p_adj_LD"
p_adj_LD
ncol(p_val_LD)
i = 1
p_adj<-p.adjust(p_val_LD$p_val_LD,method = "BH")
p_adj
p_val_LD$p_val_LD
p_val_LD
p_val_LD$i
p.adjust(p_val_LD$i,method = "BH")
rm(list=ls())
options(stringsAsFactors = FALSE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set wd to the current file locati
getwd()
dfLD<- read.csv ('../Raw_data/Normalized LD numbers.csv', stringsAsFactors = FALSE)
dfLD<- as.data.frame(dfLD)
dim(dfLD)
x=as.numeric (dfLD[,"Control"]) #to compare each condition to the control
p_val_LD<- NULL
for (i in 1:ncol(dfLD))#
{#
  p_value<-wilcox.test(x,dfLD[,i])[["p.value"]] #
  {#
    p_val_LD[[length(p_val_LD) + 1]] <- p_value#
  }#
}
p_val_LD<-as.data.frame(p_val_LD)
dim(p_val_LD)
row.names(p_val_LD)<-colnames(dfLD)
